class oscillator
  parameter Real mass2.m(quantity = "Mass", unit = "kg", min = 0.0, start = 1.0) = 1.0 "Mass of the sliding mass";
  final parameter enumeration(never, avoid, default, prefer, always) mass2.stateSelect = StateSelect.default "Priority to use s and v as states";
  Real mass2.s(quantity = "Length", unit = "m", start = -0.5, fixed = true, stateSelect = StateSelect.default) "Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
  parameter Real mass2.L(quantity = "Length", unit = "m", start = 0.0) = 1.0 "Length of component, from left flange to right flange (= flange_b.s - flange_a.s)";
  Real mass2.flange_a.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2.flange_a.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2.flange_b.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real mass2.flange_b.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real mass2.v(quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true, stateSelect = StateSelect.default) "Absolute velocity of component";
  Real mass2.a(quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of component";
  Real spring2.flange_a.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real spring2.flange_a.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real spring2.flange_b.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real spring2.flange_b.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real spring2.s_rel(quantity = "Length", unit = "m", start = 0.0) "Relative distance (= flange_b.s - flange_a.s)";
  Real spring2.f(quantity = "Force", unit = "N") "Force between flanges (positive in direction of flange axis R)";
  parameter Real spring2.c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = 10000.0 "Spring constant";
  parameter Real spring2.s_rel0(quantity = "Length", unit = "m", min = 0.0) = 1.0 "Unstretched spring length";
  parameter Real fixed2.s0(quantity = "Length", unit = "m") = 1.0 "Fixed offset position of housing";
  Real fixed2.flange.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real fixed2.flange.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  final parameter Boolean force2.useSupport = false "= true, if support flange enabled, otherwise implicitly grounded";
  Real force2.s(quantity = "Length", unit = "m") "Distance between flange and support (= flange.s - support.s)";
  Real force2.flange.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real force2.flange.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  protected Real force2.s_support(quantity = "Length", unit = "m") "Absolute position of support flange";
  Real force2.f(unit = "N") "Driving force as input signal";
  final parameter enumeration(never, avoid, default, prefer, always) damper1.stateSelect = StateSelect.prefer "Priority to use s_rel and v_rel as states";
  parameter Real damper1.s_nominal(quantity = "Length", unit = "m", min = 0.0) = 0.0001 "Nominal value of s_rel (used for scaling)";
  Real damper1.s_rel(quantity = "Length", unit = "m", start = 0.0, nominal = damper1.s_nominal, stateSelect = StateSelect.prefer) "Relative distance (= flange_b.s - flange_a.s)";
  Real damper1.v_rel(quantity = "Velocity", unit = "m/s", start = 0.0, stateSelect = StateSelect.prefer) "Relative velocity (= der(s_rel))";
  Real damper1.f(quantity = "Force", unit = "N") "Forces between flanges (= flange_b.f)";
  Real damper1.flange_a.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper1.flange_a.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  Real damper1.flange_b.s(quantity = "Length", unit = "m") "Absolute position of flange";
  Real damper1.flange_b.f(quantity = "Force", unit = "N") "Cut force directed into flange";
  parameter Real damper1.d(quantity = "TranslationalDampingConstant", unit = "N.s/m", min = 0.0, start = 0.0) = 10.0 "Damping constant";
  final parameter Boolean damper1.useHeatPort = false "= true, if heatPort is enabled";
  Real damper1.lossPower(quantity = "Power", unit = "W") "Loss power leaving component via heatPort (> 0, if heat is flowing out of component)";
  parameter Real force_input.k(start = 1.0) = 0.0 "Constant output value";
  Real force_input.y "Connector of Real output signal";
equation
  mass2.flange_b.s = spring2.flange_a.s;
  mass2.flange_b.s = damper1.flange_a.s;
  spring2.flange_b.s = fixed2.flange.s;
  spring2.flange_b.s = damper1.flange_b.s;
  force2.flange.s = mass2.flange_a.s;
  force_input.y = force2.f;
  force2.flange.f + mass2.flange_a.f = 0.0;
  damper1.flange_a.f + spring2.flange_a.f + mass2.flange_b.f = 0.0;
  damper1.flange_b.f + fixed2.flange.f + spring2.flange_b.f = 0.0;
  mass2.v = der(mass2.s);
  mass2.a = der(mass2.v);
  mass2.m * mass2.a = mass2.flange_a.f + mass2.flange_b.f;
  mass2.flange_a.s = mass2.s - mass2.L / 2.0;
  mass2.flange_b.s = mass2.s + mass2.L / 2.0;
  spring2.f = spring2.c * (spring2.s_rel - spring2.s_rel0);
  spring2.s_rel = spring2.flange_b.s - spring2.flange_a.s;
  spring2.flange_b.f = spring2.f;
  spring2.flange_a.f = -spring2.f;
  fixed2.flange.s = fixed2.s0;
  force2.flange.f = -force2.f;
  force2.s = force2.flange.s - force2.s_support;
  force2.s_support = 0.0;
  damper1.f = damper1.d * damper1.v_rel;
  damper1.lossPower = damper1.f * damper1.v_rel;
  damper1.s_rel = damper1.flange_b.s - damper1.flange_a.s;
  damper1.v_rel = der(damper1.s_rel);
  damper1.flange_b.f = damper1.f;
  damper1.flange_a.f = -damper1.f;
  force_input.y = force_input.k;
end oscillator;
