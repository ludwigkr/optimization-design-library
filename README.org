#+title: Optimization design library

* Why Choose This Library?

This repository is designed to assist users with the following:

    - Creating optimization problems using the Casadi library.
    - Testing initial guesses and constraints for the developed library.
    - Offering a more intuitive and user-friendly interface for runtime optimization.
    - Exporting optimization problems to Casadi-independent C++ code.

** Why You Might Prefer Casadi-Independent Code:

- Casadi's opimizations can have significant runtime delays, which can be problematic in real-time applications with tight computational time constraints. By developing Casadi-independent code, this project aims to mitigate this issue and make the time consumption more tracable.
- Reducing the package size and minimizing dependencies.
- Enhancing the readability and verifiability of the generated code.

* Workflow
Let's see, how an optimization problem can be formulated with this library. Working examples can be found here: [[file:min_nlp_with_params/ocp_min_nlp_with_params.py]].

**  Build core formulation
The first step is to create an =OptimizationProblem=-object in wich we can save all our formulations. We also give it name, which used in the file names of the generated code:
#+begin_src python
ocp = OptimizationProblem()
ocp.name = 'min_nlp'
#+end_src

Next, we define the optimization variables of our problem:
#+begin_src python
X = SX.sym('X', 2, 1)
ocp.optvars.register('X', X)
#+end_src

, and define the cost function of the optimization problem:
#+begin_src python
objective = 0.4 * X[0,:]**2 - 5 * X[0,:] + X[1,:]**2 - 6*X[1,:] + 50
ocp.register_objective(objective)
#+end_src

We can also define parameters, which are variable in the optimization problem formulation, but which are not used be the optimizer to minimize the cost function (as the optimization variables):
#+begin_src python
P = SX.sym("P", 1, 1)
ocp.problem_parameters.register('P', P)
#+end_src

With formulating the constraints, we finish the core formulation of the optmization problem:
#+begin_src python
constraint1 = X[1,:] - X[0,:]
ocp.constraints.register("c1", constraint1)
#+end_src

** Build constraints and initial guess
In this part we define the rules for creating the initial guess and the constraint limits for the box constraints =lb < X < ub= and the equality constraints =lbg < f(x) < ubg=.

These vectors (X0, lb, ub, lbg and ubg) are typical dependent on the special situation in which the optimization problem is solved for. Therefore, we first define the set of variables, which define the current situation and put them in a new struct =scenario_parameter=.
#+begin_src python
SP = SX.sym('SP', ocp.optvars.n_vars, 1)
ocp.scenario_parameters.register("SP", SP)
#+end_src

Next, based on the scenario-parameters we can define, how the inital guesss is  build:
#+begin_src python
X0 = SX.sym('X0', ocp.optvars.n_vars, 1)
X0[0] = SP[0]
X0[1] = SP[1]
ocp.register_initial_guess_function(X0)
#+end_src

And similar the constraints:
/Here we set them independent of any variable, so we can skip the registration of =scenario_parameter=./
#+begin_src python
# Set box constraint limits
ocp.register_lower_box_limits_function([-np.inf, -np.inf])
ocp.register_upper_box_limits_function([np.inf, np.inf])

# Set inequality constraint limits:
ocp.register_lower_inequality_constraint_limits_function([2])
ocp.register_upper_inequality_constraint_limits_function([np.inf])
#+end_src
That's it!

** Test optimization problem (in python)
Let's see how to actually solve the optimization problem.
We first build a casadi optimization solver
#+begin_src python
opts = load_optimizer_settings()
solver = optimizationsolver.build_solver(ocp, opts)
#+end_src

The casadi solver is the solver we use on the python side:
#+begin_src python
scenario = ocp.scenario_parameters.packed([10, 10])
result = optimizationsolver.run(solver, ocp, scenario)
#+end_src

If everything works as expexted, you can export the optimization problem to cpp code, which is independent of the casadi library.
#+begin_src python
cppbuilder = CppBuilder()
cppbuilder.build(ocp)
#+end_src

** Deploy to Cpp

In cpp, calling the optimization problem is as easy as in python:
1. Initialize the optimization problem class:
    #+begin_src cpp

    #+end_src

2. Define the scenario parameters and problem parameters for which you want to solve the optimization problem:
   #+begin_src cpp
    Eigen::VectorXd SP = Eigen::VectorXd(2);
    SP << 10, 10;
    float p = 2;
    scenario_parameter scenario = scenario_parameter(SP);
    problem_parameter prob_param = problem_parameter(p);
   #+end_src

3. And call the solve function:
   #+begin_src cpp
   int status = minnlpwithparams.solve();
   optimized_variable result = minnlpwithparams.xopt;
   #+end_src


* Overview SQPMethod runtime logic

*WARNING:* The SQPMethod is a reimplementation of Casadis SQPMethod. Therefore, it is in best case as good as Casadis SQPMethod. However, Casadis SQPMethod is not ready for production!

  [[file:doc/optimization-design-library-design.svg]]

* Variables
- =problem_parameters= (variable name: =prob_params=): Parameters of the optimization definition, passed to the optimizer (should but are not generated from scenario)
  Generated in interface-class or higher
- =scenario_parameters= (variable_name: =scenario=): All variables which are required to build initial guess or the limit vectors
  Generated in interface-class or higher. Replaced before the optimization call with number, so they are not passed as parameter to the optimizer.

- =quad_prob_parameter=: Collection of initial guess and limits passed to the optimizer classes
  Generated in Interface-class
- =optimizer_options=: Not yet used(?)

  [[file:doc/variable-process-overview.svg]]

